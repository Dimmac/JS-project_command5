{"version":3,"sources":["sass/base/_body.scss","sass/base/_common.scss","sass/utils/_variables.scss","sass/components/_container.scss","sass/utils/_mixins.scss"],"names":[],"mappings":"AAAA,KACE,4BAAA,CACA,iBAAA,CACA,eAAA,CACA,6BCSF,0BALE,YAAA,CACA,gBAIF,MAIE,cAAA,CACA,gBAIF,EACE,oBAAA,CACA,cAIF,IACE,aAAA,CACA,cAAA,CACA,YAIF,QACE,kBAIF,OACE,SAAA,CACA,WAAA,CACA,yBC3CF,MACE,+BAAA,CACA,sBAAA,CACA,sBAAA,CACA,uBAAA,CACA,4BAAA,CACA,2BAAA,CAEA,2BAAA,CACA,kCCTF,WACE,aAAA,CACA,cAAA,CACA,YCgEA,yBDnEF,WAMI,aC6DF,0BDnEF,WASI","file":"src.617ef76b.css","sourceRoot":"../src","sourcesContent":["body {\n  font-family: var(--main-font);\n  font-style: normal;\n  font-weight: 400;\n  color: var(--text-color-dark);\n}\n","// Title\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n// List\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  list-style: none;\n}\n\n// Link\na {\n  text-decoration: none;\n  color: inherit;\n}\n\n// Image\nimg {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\n// Address\naddress {\n  font-style: normal;\n}\n\n// Button\nbutton {\n  padding: 0;\n  border: none;\n  background-color: transparent;\n}\n",":root {\n  --main-font: 'Roboto', sans-serif;\n  --accent-color: #ff6b08;\n  --text-color-dark: #000000;\n  --text-color-light: #ffffff;\n  --text-color-warning: #ff001b;\n  --text-color-footer: #545454;\n\n  --footer-bg-overlay: #f7f7f7;\n  --cubic: cubic-bezier(0.4, 0, 0.2, 1);\n}\n",".container {\n  margin: 0 auto;\n  padding: 0 10px;\n  width: 300px;\n\n  @include min-width('medium') {\n    width: 638px;\n  }\n  @include min-width('large') {\n    width: 902px;\n  }\n}\n","@function decimal-round($number, $digits: 0, $mode: round) {\n  $n: 1;\n  // $number must be a number\n  @if type-of($number) != number {\n    @warn '#{ $number } is not a number.';\n    @return $number;\n  }\n  // $digits must be a unitless number\n  @if type-of($digits) != number {\n    @warn '#{ $digits } is not a number.';\n    @return $number;\n  } @else if not unitless($digits) {\n    @warn '#{ $digits } has a unit.';\n    @return $number;\n  }\n  @if $digits > 0 {\n    @for $i from 1 through $digits {\n      $n: $n * 10;\n    }\n  }\n  @if $mode == round {\n    @return round($number * $n) / $n;\n  } @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n  } @else if $mode == floor {\n    @return floor($number * $n) / $n;\n  } @else {\n    @warn '#{ $mode } is undefined keyword.';\n    @return $number;\n  }\n}\n\n// font-size: 16px;\n// font-weight: 400;\n// line-height: 26px;\n@mixin font($fs: 12px, $fw: 400, $lh: 16px) {\n  font-size: $fs;\n  font-weight: $fw;\n  line-height: decimal-round($lh/$fs, 2);\n}\n\n// display: flex;\n// flex-wrap: wrap;\n// align-items: center;\n// justify-content: center;\n@mixin flex-center($df: flex, $jc: center, $al: center, $fw: wrap) {\n  display: $df;\n  flex-wrap: $fw;\n  align-items: $al;\n  justify-content: $jc;\n}\n\n// @media screen and (min-device-pixel-ratio: 2) and (min-width: *width*),\n//     screen and (min-resolution: 192dpi) and (min-width: *width*),\n//     screen and (min-resolution: 2dppx) and (min-width: *width*) {\n//     background-image: url(*image*);\n//   }\n@mixin retina($image, $width) {\n  @media screen and (min-device-pixel-ratio: 2) and (min-width: map-get($min-widths, $width)),\n    screen and (min-resolution: 192dpi) and (min-width: map-get($min-widths, $width)),\n    screen and (min-resolution: 2dppx) and (min-width: map-get($min-widths, $width)) {\n    background-image: url($image);\n  }\n}\n\n// @media screen and (min-width: *width*)\n@mixin min-width($width) {\n  @media (min-width: map-get($min-widths, $width)) {\n    @content;\n  }\n}\n\n// @media screen and (min-width: *width*)\n@mixin max-width($width) {\n  @media (max-width: map-get($max-widths, $width)) {\n    @content;\n  }\n}\n"]}